<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Example/Math" id="_id_" tests="13" failures="4" errors="3"><testsuite name="Multiplication" id="_id_" tests="3" failures="1" errors="0"><testcase name="pass (info lost)" id="_testcase_id_"/><testcase name="1 * 2 == 5" id="_testcase_id_"><failure message="2 == 5" type="test">Test Failed
  Expression: 1 * 2 == 5
   Evaluated: 2 == 5</failure></testcase><testcase name="pass (info lost)" id="_testcase_id_"/></testsuite><testsuite name="" id="_id_" tests="1" failures="0" errors="0"><testcase name="pass (info lost)" id="_testcase_id_"/></testsuite><testsuite name="" id="_id_" tests="1" failures="1" errors="0"><testcase name="sqrt(20) == 5" id="_testcase_id_"><failure message="4.47213595499958 == 5" type="test">Test Failed
  Expression: sqrt(20) == 5
   Evaluated: 4.47213595499958 == 5</failure></testcase></testsuite><testsuite name="" id="_id_" tests="1" failures="0" errors="0"><testcase name="pass (info lost)" id="_testcase_id_"/></testsuite><testsuite name="addition" id="_id_" tests="3" failures="1" errors="0"><testcase name="pass (info lost)" id="_testcase_id_"/><testcase name="1 + 2 == 5" id="_testcase_id_"><failure message="3 == 5" type="test">Test Failed
  Expression: 1 + 2 == 5
   Evaluated: 3 == 5</failure></testcase><testcase name="pass (info lost)" id="_testcase_id_"/></testsuite><testsuite name="addition/negative addition" id="_id_" tests="3" failures="1" errors="0"><testcase name="pass (info lost)" id="_testcase_id_"/><testcase name="1 + -2 == 1" id="_testcase_id_"><failure message="-1 == 1" type="test">Test Failed
  Expression: 1 + -2 == 1
   Evaluated: -1 == 1</failure></testcase><testcase name="pass (info lost)" id="_testcase_id_"/></testsuite><testsuite name="other" id="_id_" tests="0" failures="0" errors="3"><testcase name="sqrt(-1)" id="_testcase_id_"><skip/></testcase><error message="Inf" type="String">
Stacktrace:
 [1] to_xml(::Test.Error)
 [2] (::TestReports.var"#4#5")(::Test.Error)
 [3] collect_to!(::Array{EzXML.Node,1}, ::Base.Generator{Array{Test.Result,1},TestReports.var"#4#5"}, ::Int64, ::Int64)
 [4] collect_to_with_first! at ./array.jl:646 [inlined]
 [5] _collect(::Array{Test.Result,1}, ::Base.Generator{Array{Test.Result,1},TestReports.var"#4#5"}, ::Base.EltypeUnknown, ::Base.HasShape{1})
 [6] collect_similar(::Array{Test.Result,1}, ::Base.Generator{Array{Test.Result,1},TestReports.var"#4#5"})
 [7] map(::Function, ::Array{Test.Result,1})
 [8] to_xml(::ReportingTestSet)
 [9] (::TestReports.var"#2#3")(::ReportingTestSet)
 [10] collect_to!(::Array{EzXML.Node,1}, ::Base.Generator{Array{Test.AbstractTestSet,1},TestReports.var"#2#3"}, ::Int64, ::Int64)
 [11] collect_to_with_first! at ./array.jl:646 [inlined]
 [12] _collect(::Array{Test.AbstractTestSet,1}, ::Base.Generator{Array{Test.AbstractTestSet,1},TestReports.var"#2#3"}, ::Base.EltypeUnknown, ::Base.HasShape{1})
 [13] collect_similar(::Array{Test.AbstractTestSet,1}, ::Base.Generator{Array{Test.AbstractTestSet,1},TestReports.var"#2#3"})
 [14] map(::Function, ::Array{Test.AbstractTestSet,1})
 [15] report(::ReportingTestSet)
 [16] |&gt;(::ReportingTestSet, ::typeof(report))
 [17] top-level scope
 [18] include at ./boot.jl:328 [inlined]
 [19] include_relative(::Module, ::String)
 [20] include(::Module, ::String)
 [21] exec_options(::Base.JLOptions)
 [22] _start() at ./client.jl:460</error><error message="ErrorException(&quot;Nooo&quot;)" type="String">
Stacktrace:
 [1] to_xml(::Test.Error)
 [2] (::TestReports.var"#4#5")(::Test.Error)
 [3] collect_to!(::Array{EzXML.Node,1}, ::Base.Generator{Array{Test.Result,1},TestReports.var"#4#5"}, ::Int64, ::Int64)
 [4] collect_to_with_first! at ./array.jl:646 [inlined]
 [5] _collect(::Array{Test.Result,1}, ::Base.Generator{Array{Test.Result,1},TestReports.var"#4#5"}, ::Base.EltypeUnknown, ::Base.HasShape{1})
 [6] collect_similar(::Array{Test.Result,1}, ::Base.Generator{Array{Test.Result,1},TestReports.var"#4#5"})
 [7] map(::Function, ::Array{Test.Result,1})
 [8] to_xml(::ReportingTestSet)
 [9] (::TestReports.var"#2#3")(::ReportingTestSet)
 [10] collect_to!(::Array{EzXML.Node,1}, ::Base.Generator{Array{Test.AbstractTestSet,1},TestReports.var"#2#3"}, ::Int64, ::Int64)
 [11] collect_to_with_first! at ./array.jl:646 [inlined]
 [12] _collect(::Array{Test.AbstractTestSet,1}, ::Base.Generator{Array{Test.AbstractTestSet,1},TestReports.var"#2#3"}, ::Base.EltypeUnknown, ::Base.HasShape{1})
 [13] collect_similar(::Array{Test.AbstractTestSet,1}, ::Base.Generator{Array{Test.AbstractTestSet,1},TestReports.var"#2#3"})
 [14] map(::Function, ::Array{Test.AbstractTestSet,1})
 [15] report(::ReportingTestSet)
 [16] |&gt;(::ReportingTestSet, ::typeof(report))
 [17] top-level scope
 [18] include at ./boot.jl:328 [inlined]
 [19] include_relative(::Module, ::String)
 [20] include(::Module, ::String)
 [21] exec_options(::Base.JLOptions)
 [22] _start() at ./client.jl:460</error><error message="DimensionMismatch(&quot;B has leading dimension 4, but needs 2&quot;)" type="String">
Stacktrace:
 [1] to_xml(::Test.Error)
 [2] (::TestReports.var"#4#5")(::Test.Error)
 [3] collect_to!(::Array{EzXML.Node,1}, ::Base.Generator{Array{Test.Result,1},TestReports.var"#4#5"}, ::Int64, ::Int64)
 [4] collect_to_with_first! at ./array.jl:646 [inlined]
 [5] _collect(::Array{Test.Result,1}, ::Base.Generator{Array{Test.Result,1},TestReports.var"#4#5"}, ::Base.EltypeUnknown, ::Base.HasShape{1})
 [6] collect_similar(::Array{Test.Result,1}, ::Base.Generator{Array{Test.Result,1},TestReports.var"#4#5"})
 [7] map(::Function, ::Array{Test.Result,1})
 [8] to_xml(::ReportingTestSet)
 [9] (::TestReports.var"#2#3")(::ReportingTestSet)
 [10] collect_to!(::Array{EzXML.Node,1}, ::Base.Generator{Array{Test.AbstractTestSet,1},TestReports.var"#2#3"}, ::Int64, ::Int64)
 [11] collect_to_with_first! at ./array.jl:646 [inlined]
 [12] _collect(::Array{Test.AbstractTestSet,1}, ::Base.Generator{Array{Test.AbstractTestSet,1},TestReports.var"#2#3"}, ::Base.EltypeUnknown, ::Base.HasShape{1})
 [13] collect_similar(::Array{Test.AbstractTestSet,1}, ::Base.Generator{Array{Test.AbstractTestSet,1},TestReports.var"#2#3"})
 [14] map(::Function, ::Array{Test.AbstractTestSet,1})
 [15] report(::ReportingTestSet)
 [16] |&gt;(::ReportingTestSet, ::typeof(report))
 [17] top-level scope
 [18] include at ./boot.jl:328 [inlined]
 [19] include_relative(::Module, ::String)
 [20] include(::Module, ::String)
 [21] exec_options(::Base.JLOptions)
 [22] _start() at ./client.jl:460</error></testsuite><testsuite name="using function from a module" id="_id_" tests="1" failures="0" errors="0"><testcase name="pass (info lost)" id="_testcase_id_"/></testsuite></testsuites>

